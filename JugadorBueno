package BBDD;

import java.sql.*;
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;

public class JugadorLaberinto {
    private static Connection conexion;
    private static Scanner scn = new Scanner(System.in);
    private static int vidaJugador = 100;
    private static int posX, posY;
    private static char[][] laberinto;
    private static boolean[][] visitado; // Para trackear las casillas visitadas
    private static int tama√±o;
    private static String usuario;

    public static void main(String[] args) {
        conectarBD();
        mostrarLaberintosDisponibles();
        jugar();
        cerrarConexion();
    }

    private static void conectarBD() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conexion = DriverManager.getConnection(
                "jdbc:mysql://localhost/laberintobueno", 
                "root", 
                "tucontrase√±a"
            );
        } catch (Exception e) {
            System.err.println("Error al conectar con la BD: " + e.getMessage());
            System.exit(1);
        }
    }

    private static void mostrarLaberintosDisponibles() {
        try (Statement stmt = conexion.createStatement()) {
            ResultSet rs = stmt.executeQuery(
                "SELECT id, dimension1, cocodrilos, botiquines FROM Laberintos"
            );
            
            System.out.println("\nLABERINTOS DISPONIBLES:");
            while (rs.next()) {
                System.out.printf(
                    "ID: %d - Tama√±o: %dx%d - Cocodrilos: %d - Botiquines: %d%n",
                    rs.getInt("id"),
                    rs.getInt("dimension1"),
                    rs.getInt("dimension1"),
                    rs.getInt("cocodrilos"),
                    rs.getInt("botiquines")
                );
            }
        } catch (SQLException e) {
            System.err.println("Error al obtener laberintos: " + e.getMessage());
        }
    }

    private static void jugar() {
        System.out.print("\nIntroduce tu nombre de usuario: ");
        usuario = scn.nextLine();
        
        System.out.print("Selecciona el ID del laberinto: ");
        int idLaberinto = scn.nextInt();
        scn.nextLine();

        cargarLaberinto(idLaberinto);
        iniciarJuego();
    }

    private static void cargarLaberinto(int idLaberinto) {
        try {
            // Obtener configuraci√≥n del laberinto
            PreparedStatement psLab = conexion.prepareStatement(
                "SELECT dimension1, cocodrilos, botiquines, dmgCocodrilo FROM Laberintos WHERE id = ?"
            );
            psLab.setInt(1, idLaberinto);
            ResultSet rsLab = psLab.executeQuery();
            
            if (rsLab.next()) {
                tama√±o = rsLab.getInt("dimension1");
                laberinto = new char[tama√±o][tama√±o];
                inicializarLaberinto();
            }

            // Obtener disposici√≥n
            PreparedStatement psDisposicion = conexion.prepareStatement(
                "SELECT id FROM Disposiciones WHERE id_laberinto = ? LIMIT 1"
            );
            psDisposicion.setInt(1, idLaberinto);
            ResultSet rsDisposicion = psDisposicion.executeQuery();
            
            if (rsDisposicion.next()) {
                int idDisposicion = rsDisposicion.getInt("id");
                cargarPuertas(idDisposicion);
            }

        } catch (SQLException e) {
            System.err.println("Error al cargar laberinto: " + e.getMessage());
        }
    }

    private static void inicializarLaberinto() {
        for (int i = 0; i < tama√±o; i++) {
            for (int j = 0; j < tama√±o; j++) {
                laberinto[i][j] = ' ';
            }
        }
        
        // Inicializar matriz de visitado
        visitado = new boolean[tama√±o][tama√±o];
        for (int i = 0; i < tama√±o; i++) {
            for (int j = 0; j < tama√±o; j++) {
                visitado[i][j] = false;
            }
        }
        
        laberinto[0][0] = '*';
        laberinto[tama√±o-1][tama√±o-1] = '=';
        posX = 0;
        posY = 0;
        
        // Marcar la posici√≥n inicial como visitada
        visitado[posX][posY] = true;
    }

    private static void cargarPuertas(int idDisposicion) throws SQLException {
        PreparedStatement ps = conexion.prepareStatement(
            "SELECT coord1, coord2 FROM Puertas WHERE id_disposicion = ? ORDER BY posicion"
        );
        ps.setInt(1, idDisposicion);
        ResultSet rs = ps.executeQuery();
        
        while (rs.next()) {
            int x = rs.getInt("coord1");
            int y = rs.getInt("coord2");
            if (laberinto[x][y] != '*' && laberinto[x][y] != '=') {
                laberinto[x][y] = '-';
            }
        }
    }

    private static void iniciarJuego() {
        System.out.println("\n¬°COMIENZA EL JUEGO!");
        System.out.println("Est√°s en la entrada del laberinto. Debes llegar a la salida sin saber exactamente d√≥nde te encuentras.");
        System.out.println("Solo recibir√°s pistas sobre los movimientos disponibles y eventos que ocurran.");
        
        while (vidaJugador > 0) {
            mostrarEstadoJuego();
            procesarMovimiento();
            verificarCasillaActual();
            if (haGanado()) {
                System.out.println("\n¬°FELICIDADES! ¬°HAS LLEGADO A LA SALIDA!");
                guardarResultado(true);
                mostrarRanking();
                return;
            }
        }
        guardarResultado(false);
        System.out.println("¬°HAS PERDIDO TODA TU VIDA!");
    }

    private static void mostrarEstadoJuego() {
        System.out.println("\n--- MAPA EXPLORADO ---");
        mostrarMapaExplorado();
        System.out.printf("Vida actual: %d%n", vidaJugador);
        
        // Solo mostrar informaci√≥n sobre movimientos disponibles
        System.out.print("Movimientos disponibles: ");
        List<String> movimientosDisponibles = new ArrayList<>();
        
        if (posX > 0 && esMovimientoValido(posX-1, posY)) {
            movimientosDisponibles.add("W (Norte)");
        }
        if (posX < tama√±o-1 && esMovimientoValido(posX+1, posY)) {
            movimientosDisponibles.add("S (Sur)");
        }
        if (posY > 0 && esMovimientoValido(posX, posY-1)) {
            movimientosDisponibles.add("A (Oeste)");
        }
        if (posY < tama√±o-1 && esMovimientoValido(posX, posY+1)) {
            movimientosDisponibles.add("D (Este)");
        }
        
        if (movimientosDisponibles.isEmpty()) {
            System.out.println("¬°NINGUNO! Est√°s atrapado.");
        } else {
            System.out.println(String.join(", ", movimientosDisponibles));
        }
        
        // Dar pistas sutiles sobre la ubicaci√≥n
        darPistasUbicacion();
    }
    
    private static void mostrarMapaExplorado() {
        System.out.println("Leyenda: [?] = No explorado, [-] = Camino, [#] = Pared, [*] = Entrada, [=] = Salida");
        System.out.println("         [C] = Cocodrilo encontrado, [B] = Botiqu√≠n encontrado, [X] = Tu posici√≥n actual");
        System.out.println();
        
        // Mostrar coordenadas superiores
        System.out.print("   ");
        for (int j = 0; j < tama√±o; j++) {
            System.out.printf("%2d ", j);
        }
        System.out.println();
        
        for (int i = 0; i < tama√±o; i++) {
            System.out.printf("%2d ", i); // Mostrar coordenada de fila
            for (int j = 0; j < tama√±o; j++) {
                if (i == posX && j == posY) {
                    // Mostrar posici√≥n actual del jugador
                    System.out.print(" X ");
                } else if (visitado[i][j]) {
                    // Mostrar casilla visitada
                    char casilla = laberinto[i][j];
                    if (casilla == '*') {
                        System.out.print(" * ");
                    } else if (casilla == '=') {
                        System.out.print(" = ");
                    } else if (casilla == '-') {
                        System.out.print(" - ");
                    } else if (casilla == 'C') {
                        System.out.print(" C ");
                    } else if (casilla == 'B') {
                        System.out.print(" B ");
                    } else {
                        System.out.print(" - ");
                    }
                } else {
                    // Mostrar casillas adyacentes como paredes si no se puede acceder
                    if (esAdyacente(i, j) && !esMovimientoValido(i, j)) {
                        System.out.print(" # ");
                    } else {
                        System.out.print(" ? ");
                    }
                }
            }
            System.out.println();
        }
        System.out.println();
    }
    
    private static boolean esAdyacente(int x, int y) {
        // Verifica si una casilla es adyacente a la posici√≥n actual
        return Math.abs(x - posX) + Math.abs(y - posY) == 1;
    }
    
    private static void darPistasUbicacion() {
        // Pistas sutiles sin revelar la posici√≥n exacta
        if (posX == 0 && posY == 0) {
            System.out.println("üí° Sientes que est√°s en el punto de partida del laberinto.");
        } else if (posX == tama√±o-1 && posY == tama√±o-1) {
            System.out.println("üéØ ¬°Sientes una brisa fresca! La salida debe estar muy cerca.");
        } else {
            // Dar pistas sobre qu√© tan cerca est√° de los bordes
            if (posX == 0) {
                System.out.println("üí° Sientes una pared s√≥lida al norte.");
            } else if (posX == tama√±o-1) {
                System.out.println("üí° Sientes una pared s√≥lida al sur.");
            }
            
            if (posY == 0) {
                System.out.println("üí° Sientes una pared s√≥lida al oeste.");
            } else if (posY == tama√±o-1) {
                System.out.println("üí° Sientes una pared s√≥lida al este.");
            }
            
            // Pista sobre qu√© tan lejos est√° de la salida (aproximadamente)
            int distanciaASalida = Math.abs(posX - (tama√±o-1)) + Math.abs(posY - (tama√±o-1));
            if (distanciaASalida <= 2) {
                System.out.println("üåü Sientes que la salida est√° muy cerca...");
            } else if (distanciaASalida <= tama√±o/2) {
                System.out.println("üß≠ Tienes la sensaci√≥n de estar en una zona intermedia del laberinto.");
            } else {
                System.out.println("üó∫Ô∏è Sientes que a√∫n te queda un largo camino por recorrer.");
            }
        }
    }

    private static void procesarMovimiento() {
        System.out.print("\n¬øHacia d√≥nde quieres moverte? (W/A/S/D): ");
        String movimiento = scn.nextLine().toUpperCase();
        
        int newX = posX;
        int newY = posY;
        
        switch (movimiento) {
            case "W": 
                newX--; 
                System.out.println("Te diriges hacia el norte...");
                break;
            case "S": 
                newX++; 
                System.out.println("Te diriges hacia el sur...");
                break;
            case "A": 
                newY--; 
                System.out.println("Te diriges hacia el oeste...");
                break;
            case "D": 
                newY++; 
                System.out.println("Te diriges hacia el este...");
                break;
            default: 
                System.out.println("‚ùå Movimiento inv√°lido! Usa W, A, S, D"); 
                return;
        }
        
        if (esMovimientoValido(newX, newY)) {
            posX = newX;
            posY = newY;
            visitado[posX][posY] = true; // Marcar nueva posici√≥n como visitada
            System.out.println("‚úÖ Te mueves exitosamente.");
        } else {
            System.out.println("üöß ¬°Te topas con una pared! No puedes moverte en esa direcci√≥n.");
        }
    }

    private static boolean esMovimientoValido(int x, int y) {
        return x >= 0 && x < tama√±o && 
               y >= 0 && y < tama√±o && 
               (laberinto[x][y] == '-' || laberinto[x][y] == '*' || laberinto[x][y] == '=');
    }

    private static void verificarCasillaActual() {
        char casilla = laberinto[posX][posY];
        if (casilla == 'C') {
            System.out.println("üêä ¬°COCODRILO! Un cocodrilo te ataca desde las sombras. Pierdes vida.");
            vidaJugador -= 25;
            if (vidaJugador <= 0) {
                System.out.println("üíÄ El cocodrilo te ha derrotado...");
            }
        } else if (casilla == 'B') {
            System.out.println("üè• ¬°BOTIQU√çN! Encuentras un botiqu√≠n m√©dico. Recuperas vida.");
            vidaJugador += 20;
            if (vidaJugador > 100) {
                vidaJugador = 100; // Limitar la vida m√°xima
                System.out.println("üíö Tu vida est√° al m√°ximo.");
            }
        }
    }

    private static boolean haGanado() {
        return posX == tama√±o-1 && posY == tama√±o-1;
    }

    private static void guardarResultado(boolean salida) {
        try (PreparedStatement ps = conexion.prepareStatement(
            "INSERT INTO Ranking (usuario, vida, laberinto, salida) VALUES (?, ?, ?, ?)")) {
            ps.setString(1, usuario);
            ps.setInt(2, vidaJugador);
            ps.setInt(3, 1); 
            ps.setBoolean(4, salida);
            ps.executeUpdate();
            
            if (salida) {
                System.out.println("üèÜ Tu resultado ha sido guardado en el ranking.");
            }
        } catch (SQLException e) {
            System.err.println("Error al guardar resultado: " + e.getMessage());
        }
    }

    private static void mostrarRanking() {
        try (Statement stmt = conexion.createStatement()) {
            ResultSet rs = stmt.executeQuery(
                "SELECT usuario, vida, salida FROM Ranking ORDER BY vida DESC LIMIT 5"
            );
            
            System.out.println("\nüèÜ --- TOP 5 JUGADORES ---");
            int posicion = 1;
            while (rs.next()) {
                String emoji = posicion == 1 ? "ü•á" : posicion == 2 ? "ü•à" : posicion == 3 ? "ü•â" : "üèÖ";
                System.out.printf(
                    "%s %d. Usuario: %-15s Vida: %-5d Completado: %s%n",
                    emoji,
                    posicion,
                    rs.getString("usuario"),
                    rs.getInt("vida"),
                    rs.getBoolean("salida") ? "S√≠" : "No"
                );
                posicion++;
            }
        } catch (SQLException e) {
            System.err.println("Error al obtener ranking: " + e.getMessage());
        }
    }

    private static void cerrarConexion() {
        try {
            if (conexion != null) conexion.close();
        } catch (SQLException e) {
            System.err.println("Error al cerrar conexi√≥n: " + e.getMessage());
        }
    }
}
